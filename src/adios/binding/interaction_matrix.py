import os
import numpy as np

from typing import Tuple

# Base directory
split_current_dir = os.getcwd().split("/")
package_name = "adios"
base_dir = "/".join(split_current_dir[: split_current_dir.index(package_name) + 1])


def decode_single_interaction(interaction_string: str) -> Tuple[int, int, int]:
    """
    Decode a single interaction string into a tuple of integers.
    The single interaction sting is taken from the agnostic compact represtation from Absolut's interactions.

    Args:
        interaction_string (str): A string representing an interaction between two aminoacids. Examples: "a0000", "bg___"

    Returns:
        tuple: A tuple of integers representing the interaction. The first integer is the position on the antibody,
               the second is the position on the antigen, and the third is -1. If the antibody is folded onto itself,
               then the first and third integers represent the locations of the two residues involved in the interaction
               and the second integer is -1.

    Examples:
        "a0000" -> (0, 0, -1)
        "bg___" -> (1, -1, 6)
    """
    ascii_a = ord("a")
    first_entry = ord(interaction_string[0]) - ascii_a
    second_ord = ord(interaction_string[1]) - ascii_a
    if second_ord < 0:
        second_ord = int(interaction_string[1:])
        return (first_entry, second_ord, -1)
    else:
        return (first_entry, -1, second_ord)


def decode_all_interactions(
    compact_agnostic_file_path: str = f"{base_dir}/data/agnostic_compact.txt",
    antigen_code: str = "2R29",
    output_dir_path: str = f"{base_dir}/data",
) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    """
    Decode all interactions from an agnostic compact file generated by Absolut into a numpy array.
    The interactions are saved in three different numpy arrays: one for the location on the antibody,
    one for the location on the antigen, and one for the location on the antibody if the antibody is folded onto itself.
    This function also saves the numpy arrays to the output directory.

    Args:
        compact_agnostic_file_path (str): The path to the agnostic compact file generated by Absolut.
        antigen_code (str): The code of the antigen. This is used to name the output files.
        output_dir_path (str): The directory where the numpy arrays will be saved.

    Returns:
        tuple: A tuple of numpy arrays. The first array is the antibody location, the second is the antigen location,
               and the third is the antibody location if the antibody is folded onto itself. The last column in all of
               them is -1.
    """
    # Check that the output directory exists, if not raise an error
    if not os.path.exists(output_dir_path):
        raise ValueError(f"The output directory: {output_dir_path} does not exist.")

    # Read the compact agnostic file
    with open(compact_agnostic_file_path, "r") as file:
        lines = [line.strip().split("\t")[0] for line in file]
    lines = lines[1:]

    # Get array dimensions
    chars_per_entry = 5
    array_max_needed = max(len(line) for line in lines) // chars_per_entry
    total_entries = len(lines)

    # Initialize arrays
    primary_sites_antibody = np.zeros((total_entries, array_max_needed), dtype=int) - 1
    secondary_sites_antigen = np.zeros((total_entries, array_max_needed), dtype=int) - 1
    secondary_sites_antibody = (
        np.zeros((total_entries, array_max_needed), dtype=int) - 1
    )

    # Get the interactions
    for line_number, line in enumerate(lines):
        for i in range(0, len(line), chars_per_entry):
            entry = line[i : i + chars_per_entry]
            primary_entr, secondary_entr_antigen, secondary_entr_antibody = (
                decode_single_interaction(entry)
            )
            primary_sites_antibody[line_number, i // chars_per_entry] = primary_entr
            secondary_sites_antigen[line_number, i // chars_per_entry] = (
                secondary_entr_antigen
            )
            secondary_sites_antibody[line_number, i // chars_per_entry] = (
                secondary_entr_antibody
            )

    # Save the arrays
    with open(f"{output_dir_path}/{antigen_code}_primary_s_antibody.npy", "wb") as file:
        np.save(file, primary_sites_antibody)

    with open(
        f"{output_dir_path}/{antigen_code}_secondary_s_antigen.npy", "wb"
    ) as file:
        np.save(file, secondary_sites_antigen)

    with open(
        f"{output_dir_path}/{antigen_code}_secondary_s_antibody.npy", "wb"
    ) as file:
        np.save(file, secondary_sites_antibody)

    return primary_sites_antibody, secondary_sites_antigen, secondary_sites_antibody
